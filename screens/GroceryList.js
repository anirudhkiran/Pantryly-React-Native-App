import React, { useState, useEffect } from "react";
import {
  StyleSheet,
  View,
  FlatList,
  Alert,
  Text,
  Share,
  TouchableOpacity,
  Dimensions,
} from "react-native";

import { FAB } from "react-native-paper";
import AsyncStorage from "@react-native-async-storage/async-storage";

import AddItemModal from "../components/AddItemModal";
import GroceryListHeader from "../components/GroceryListHeader";
import GroceryListItem from "../components/GroceryListItem";
import Header from "../components/Header";

export default function GroceryList(props) {
  const [modalVisibility, setModalVisibility] = useState(false);
  const [groceryItemList, setGroceryItemList] = useState({});
  const [isDataReady, setIsDataReady] = useState(false);

  //useEffect is used to perfrom some fetches before user uses the app
  useEffect(() => {
    loadItems();
  });

  const loadItems = async () => {
    if (isDataReady === false) {
      try {
        const getItems = await AsyncStorage.getItem("GroceryList");
        const parsedItems = JSON.parse(getItems);
        setGroceryItemList(parsedItems || {});
        setIsDataReady(true);
        if (isDataReady) {
          alert("Data load completed");
        }
      } catch (err) {
        alert("Application Error. Cannot load data.");
      }
    }
  };

  const saveItemsToStorage = (newItemList) => {
    const saveItems = AsyncStorage.setItem(
      "GroceryList",
      JSON.stringify(newItemList)
    );
  };

  const showModal = () => {
    setModalVisibility(true);
  };

  const removeModal = () => {
    setModalVisibility(false);
  };

  const addItem = (data) => {
    setGroceryItemList((prevState) => {
      const newItemList = {
        ...prevState,
        ...data,
      };
      saveItemsToStorage(newItemList);
      return { ...newItemList };
    });
  };

  const deleteItem = (id) => {
    Alert.alert("Delete Item", "Are you sure you want to delete this item?", [
      {
        text: "Cancel",
        // onPress: () => console.log("Cancel Pressed"),
        style: "cancel",
      },
      {
        text: "Yes",
        onPress: () => {
          setGroceryItemList((prevState) => {
            const tempItems = groceryItemList;
            delete tempItems[id];
            const newItemList = {
              ...tempItems,
            };
            saveItemsToStorage(newItemList);
            return { ...newItemList };
          });
        },
      },
    ]);
  };
  const clearList = () => {
    Alert.alert(
      "Clear Grocery List",
      "Are you sure you want to clear this list?",
      [
        {
          text: "Cancel",
          style: "cancel",
        },
        {
          text: "Yes",
          onPress: () => {
            setGroceryItemList((prevState) => {
              const newItemList = {};
              saveItemsToStorage(newItemList);
              return { ...newItemList };
            });
          },
        },
      ]
    );
  };

  const renderItem = ({ item }) => (
    <GroceryListItem itemData={groceryItemList[item]} deleteItem={deleteItem} />
  );

  const shareGroceryList = async () => {
    const months = [
      "",
      "JAN",
      "FEB",
      "MAR",
      "APR",
      "MAY",
      "JUN",
      "JUL",
      "AUG",
      "SEP",
      "OCT",
      "NOV",
      "DEC",
    ];
    const date = new Date();
    const day = date.getDate().toString();
    const m = date.getMonth() + 1;
    const month = months[m];
    const year = date.getFullYear().toString();
    const currDate = day + " " + month + " " + year;

    var shareList = "Your Grocery List for " + currDate + " is:\n\n";

    Object.keys(groceryItemList).forEach((element) => {
      const name = groceryItemList[element].name;
      const quantity = groceryItemList[element].quantity;
      const unit = groceryItemList[element].unit;
      const data = name + " " + quantity + " " + unit + "\n";
      shareList += data;
    });

    shareList += "\n\n*Grocery List generated by Pantryly*";

    try {
      const result = await Share.share({
        message: shareList,
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      alert(error.message);
    }
  };
  if (Object.keys(groceryItemList).length === 0) {
    return (
      <View style={styles.screen}>
        <Header headerText={" Grocery List "} />
        <View style={styles.noItemContainer}>
          <Text style={{ color: "gray" }}> No items in your Grocery List</Text>
          <AddItemModal
            modalVisibility={modalVisibility}
            closeModal={removeModal}
            addItem={addItem}
            modalHeaderText={"  Add to Grocery List  "}
          />
        </View>
        <FAB
          style={styles.fab}
          big
          icon="plus"
          onPress={() => showModal()}
          color="white"
        />
      </View>
    );
  } else {
    return (
      <View style={styles.screen}>
        <GroceryListHeader
          headerText=" Grocery List "
          shareList={shareGroceryList}
        />
        <View style={styles.container}>
          <AddItemModal
            modalVisibility={modalVisibility}
            closeModal={removeModal}
            addItem={addItem}
            modalHeaderText={"  Add to Grocery List  "}
          />
          <TouchableOpacity style={styles.clearListButton} onPress={clearList}>
            <Text style={{ fontSize: 18, color: "white" }}>Clear List</Text>
          </TouchableOpacity>
          <FlatList
            data={Object.keys(groceryItemList)}
            renderItem={renderItem}
            keyExtractor={(item) => groceryItemList[item].id.toString()}
          />
          <FAB
            style={styles.fab}
            big
            icon="plus"
            onPress={() => showModal()}
            color="white"
          />
        </View>
      </View>
    );
  }
}

const { width, height } = Dimensions.get("window");
const styles = StyleSheet.create({
  screen: {
    flex: 1,
  },
  container: {
    flex: 1,
    alignItems: "center",
  },
  clearListButton: {
    marginVertical: height * 0.01,
    backgroundColor: "coral",
    padding: 8,
    borderRadius: 10,
  },

  noItemContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  fab: {
    flex: 1,
    position: "absolute",
    margin: 16,
    right: 10,
    bottom: 3,
    backgroundColor: "coral",
  },
});
